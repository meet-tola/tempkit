// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id @db.Uuid
  email               String    @unique
  name                String?
  avatarUrl           String?   @map("avatar_url")
  role                String?
  roleOther           String?   @map("role_other")
  documentTypes       String[]  @map("document_types")
  onboardingCompleted Boolean   @default(false) @map("onboarding_completed")
  aiUsage             Int       @default(0)
  planExpiresAt       DateTime?
  plan                UserPlan  @default(FREE)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  templates Template[]
  documents Document[]
  projects  Project[]

  @@map("users")
}

model Template {
  id          String           @id @default(cuid())
  name        String
  description String?
  content     Json
  thumbnail   String?
  category    TemplateCategory
  isPublic    Boolean          @default(false)
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("templates")
}

model Document {
  id        String         @id @default(cuid())
  title     String
  content   Json
  status    DocumentStatus @default(DRAFT)
  thumbnail String?
  metadata  Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  userId     String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("documents")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  clientName  String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("projects")
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum TemplateCategory {
  PROPOSAL
  CONTRACT
  INVOICE
  BRIEF
  NDA
  LEGAL
  PORTFOLIO
  PRESENTATION
}

enum DocumentStatus {
  DRAFT
  REVIEW
  SENT
  APPROVED
  SIGNED
  COMPLETED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}
